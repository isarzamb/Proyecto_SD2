--Synchronous Sequential Machine
--https://vasanza.blogspot.com
--https://github.com/vasanza/MSI-VHDL

--Library
library ieee;
use ieee.std_logic_1164.all;

--Entity
entity MSS is
	port(
		resetn,clk,start: in std_logic;
		termina_actual, cambio,termina_iterativo: in std_logic;
		en_cnt,rst_cnt: out std_logic; --entradas del contador up 0
		en_cnt_1,load_cnt,rst_cnt_1: out std_logic; -- entradas del cotador up 1
		en_rg,rst_rg,en_rg_1,rst_rg_1: out std_logic; -- entradas de los registros para edad
		en_rg_2,rst_rg_2,en_rg_3,rst_rg_3,rst_rg_dir,en_rg_dir: out std_logic; -- entradas de los registros para edad
		sel,sel_1,sel_2,sel_3: out std_logic; --selectores de los mux
		rw,reset_rdm,load_seed,gen_rdm:out std_logic; -- entradas de la random ram 0
		rw_1,reset_rdm_1,load_seed_1,gen_rdm_1: out std_logic;
		en_iterativo,rst_iterativo: out std_logic); -- entradas de la random ram 0
end MSS;

--Architecture
architecture solve of MSS is
	-- Signals,Constants,Variables,Components
	type estado is (s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19);
	signal y: estado;
	begin
	--Process #1: Next state decoder and state memory
	process(resetn,clk)
	--Sequential programming
		begin
			if resetn = '0' then y<= s1;
			elsif (clk'event and clk = '1') then
				case y is
					when s1 => 
								if start='1' then y<= s2;
								else y<=s1;
								end if;
								
					when s2 => 
								if start='0' then y<=s3;
								else y<=s2;
								end if;
							  
					when s3 => y<=s4;
					when s4 => y <= s5;
					when s5 => 
								if termina_iterativo='0' then y<=s4;
								else y<=s6;
								end if;
					when s6 => y <= s7;
					when s7 => y <= s8;
					when s8 => y <= s9;
					when s9 =>
								if termina_iterativo='0' then y<=s10;
								else y<=s12;
								end if;
					
					when s10 =>
								if cambio='0' then y<=s9;
								else y<=s11;
								end if;
					when s11 => y<=s8;
					when s12=> y<=s13;																
					when s13 => y<=s14;
					when s14 => y<=s19;
								
					when s15=> y<=s17;
					when s16=> y<=s7;
					when s17=> y<=s18;
					when s18=>
								if termina_iterativo='0' then y<= s17;
								else y<=s1;
								end if;
					when s19=> 
								if termina_actual='1' then y<=s15;
								else y<=s16;
								end if;
				end case;
			end if;
	end process;
	--Process #2: Output decoder
	process(y)-- mealy ->(y,d,n)
	--Sequential programming
		begin
			en_cnt<='0';rst_cnt<='0';load_cnt<='0';-- cnt
			en_cnt_1<='0';rst_cnt_1<='0';--cnt_1
			en_rg<='0';rst_rg<='0';en_rg_1<='0';rst_rg_1<='0';
			en_rg_2<='0';rst_rg_2<='0';en_rg_3<='0';rst_rg_3<='0';
			en_rg_2<='0';rst_rg_2<='0';en_rg_3<='0';rst_rg_3<='0';rst_rg_dir<='0';en_rg_dir<='0';
			rw<='0';reset_rdm<='0';load_seed<='0';gen_rdm <='0';
			rw_1<='0';reset_rdm_1<='0';load_seed_1<='0';gen_rdm_1<='0';rst_iterativo<='0';en_iterativo<='0';

			case y is
			-- proceso de llenado de la random ram
				when s1 => rst_cnt_1<='1';rst_rg<='1';rst_rg_1<='1';rst_rg_2<='1';rst_rg_3<='1';
							reset_rdm<='1';reset_rdm_1<='1';rst_cnt<='1';rst_rg_dir<='1';
				when s2 =>
				when s3 => rw<='1';gen_rdm <='1';load_seed<='1';
							  rw_1<='1';gen_rdm_1<='1';load_seed_1<='1';
				when s4 => en_cnt<='1';
				when s5 => rw<='1';gen_rdm <='1';
							  rw_1<='1';gen_rdm_1<='1';
				when s6=>  rst_cnt<='1';rst_cnt_1<='1';rst_rg<='1';rst_rg_1<='1';rst_rg_2<='1';rst_rg_3<='1';rst_iterativo<='1';
			
			-- proceso de ordenamiento de los datos almacenados en la ram	
				when s7=> en_rg<='1'; en_rg_1<='1';
				when s8=> 
				when s9=> en_cnt<='1';en_iterativo<='1';
				when s10=> 
				when s11=> en_rg<='1'; en_rg_dir<='1';
				when s12=>sel<='1';rw<='1';
				when s13=> sel_1<='1'; sel_3<='1'; rw<='1'; 
				when s14=> en_cnt_1<='1'; load_cnt<='1'; en_cnt<='1'; 
				when s15=> rst_cnt<='1'; 
				when s16=> en_cnt<='1';
				when s17=>en_cnt<='1';
				when s18=>	
				when s19=>
		

				end case;
	end process;
	--Process #n... 
end solve;
